'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class AnnotatedTDS
    Inherits DataSet
    
    Private tableOurCustomers As OurCustomersDataTable
    
    Private tableTheirInvoices As TheirInvoicesDataTable
    
    Private relationCustomerInvoice As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Customer")) Is Nothing) Then
                Me.Tables.Add(New OurCustomersDataTable(ds.Tables("Customer")))
            End If
            If (Not (ds.Tables("Invoice")) Is Nothing) Then
                Me.Tables.Add(New TheirInvoicesDataTable(ds.Tables("Invoice")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OurCustomers As OurCustomersDataTable
        Get
            Return Me.tableOurCustomers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TheirInvoices As TheirInvoicesDataTable
        Get
            Return Me.tableTheirInvoices
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As AnnotatedTDS = CType(MyBase.Clone,AnnotatedTDS)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Customer")) Is Nothing) Then
            Me.Tables.Add(New OurCustomersDataTable(ds.Tables("Customer")))
        End If
        If (Not (ds.Tables("Invoice")) Is Nothing) Then
            Me.Tables.Add(New TheirInvoicesDataTable(ds.Tables("Invoice")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableOurCustomers = CType(Me.Tables("Customer"),OurCustomersDataTable)
        If (Not (Me.tableOurCustomers) Is Nothing) Then
            Me.tableOurCustomers.InitVars
        End If
        Me.tableTheirInvoices = CType(Me.Tables("Invoice"),TheirInvoicesDataTable)
        If (Not (Me.tableTheirInvoices) Is Nothing) Then
            Me.tableTheirInvoices.InitVars
        End If
        Me.relationCustomerInvoice = Me.Relations("CustomerInvoice")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "AnnotatedTDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/AnnotatedTDS"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableOurCustomers = New OurCustomersDataTable
        Me.Tables.Add(Me.tableOurCustomers)
        Me.tableTheirInvoices = New TheirInvoicesDataTable
        Me.Tables.Add(Me.tableTheirInvoices)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("CustomerInvoice", New DataColumn() {Me.tableOurCustomers.CustomerIDColumn}, New DataColumn() {Me.tableTheirInvoices.CustomerIDColumn})
        Me.tableTheirInvoices.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.Cascade
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        Me.relationCustomerInvoice = New DataRelation("CustomerInvoice", New DataColumn() {Me.tableOurCustomers.CustomerIDColumn}, New DataColumn() {Me.tableTheirInvoices.CustomerIDColumn}, false)
        Me.Relations.Add(Me.relationCustomerInvoice)
    End Sub
    
    Private Function ShouldSerializeOurCustomers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTheirInvoices() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub OurCustomerChangeEventHandler(ByVal sender As Object, ByVal e As OurCustomerChangeEvent)
    
    Public Delegate Sub TheirInvoiceChangeEventHandler(ByVal sender As Object, ByVal e As TheirInvoiceChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OurCustomersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerID As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnLastName As DataColumn
        
        Private columnMiddleName As DataColumn
        
        Private columnAddress As DataColumn
        
        Private columnApartment As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnState As DataColumn
        
        Private columnZip As DataColumn
        
        Private columnHomePhone As DataColumn
        
        Private columnBusinessPhone As DataColumn
        
        Private columnFullName As DataColumn
        
        Friend Sub New()
            MyBase.New("Customer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property LastNameColumn As DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Friend ReadOnly Property MiddleNameColumn As DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property ApartmentColumn As DataColumn
            Get
                Return Me.columnApartment
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property StateColumn As DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        Friend ReadOnly Property ZipColumn As DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        Friend ReadOnly Property HomePhoneColumn As DataColumn
            Get
                Return Me.columnHomePhone
            End Get
        End Property
        
        Friend ReadOnly Property BusinessPhoneColumn As DataColumn
            Get
                Return Me.columnBusinessPhone
            End Get
        End Property
        
        Friend ReadOnly Property FullNameColumn As DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OurCustomer
            Get
                Return CType(Me.Rows(index),OurCustomer)
            End Get
        End Property
        
        Public Event OurCustomerChanged As OurCustomerChangeEventHandler
        
        Public Event OurCustomerChanging As OurCustomerChangeEventHandler
        
        Public Event OurCustomerDeleted As OurCustomerChangeEventHandler
        
        Public Event OurCustomerDeleting As OurCustomerChangeEventHandler
        
        Public Overloads Sub AddOurCustomer(ByVal row As OurCustomer)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOurCustomer(ByVal CustomerID As System.Guid, ByVal FirstName As String, ByVal LastName As String, ByVal MiddleName As String, ByVal Address As String, ByVal Apartment As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal HomePhone As String, ByVal BusinessPhone As String, ByVal FullName As String) As OurCustomer
            Dim rowOurCustomer As OurCustomer = CType(Me.NewRow,OurCustomer)
            rowOurCustomer.ItemArray = New Object() {CustomerID, FirstName, LastName, MiddleName, Address, Apartment, City, State, Zip, HomePhone, BusinessPhone, FullName}
            Me.Rows.Add(rowOurCustomer)
            Return rowOurCustomer
        End Function
        
        Public Function FindByCustomerID(ByVal CustomerID As System.Guid) As OurCustomer
            Return CType(Me.Rows.Find(New Object() {CustomerID}),OurCustomer)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OurCustomersDataTable = CType(MyBase.Clone,OurCustomersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OurCustomersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnLastName = Me.Columns("LastName")
            Me.columnMiddleName = Me.Columns("MiddleName")
            Me.columnAddress = Me.Columns("Address")
            Me.columnApartment = Me.Columns("Apartment")
            Me.columnCity = Me.Columns("City")
            Me.columnState = Me.Columns("State")
            Me.columnZip = Me.Columns("Zip")
            Me.columnHomePhone = Me.Columns("HomePhone")
            Me.columnBusinessPhone = Me.Columns("BusinessPhone")
            Me.columnFullName = Me.Columns("FullName")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New DataColumn("LastName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastName)
            Me.columnMiddleName = New DataColumn("MiddleName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiddleName)
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnApartment = New DataColumn("Apartment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApartment)
            Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCity)
            Me.columnState = New DataColumn("State", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnState)
            Me.columnZip = New DataColumn("Zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZip)
            Me.columnHomePhone = New DataColumn("HomePhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHomePhone)
            Me.columnBusinessPhone = New DataColumn("BusinessPhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBusinessPhone)
            Me.columnFullName = New DataColumn("FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullName)
            Me.Constraints.Add(New UniqueConstraint("ADONETKey1", New DataColumn() {Me.columnCustomerID}, true))
            Me.Constraints.Add(New UniqueConstraint("UniqueHomePhone", New DataColumn() {Me.columnHomePhone, Me.columnBusinessPhone}, false))
            Me.columnCustomerID.AllowDBNull = false
            Me.columnCustomerID.Unique = true
            Me.columnFirstName.AllowDBNull = false
            Me.columnLastName.AllowDBNull = false
            Me.columnFullName.Expression = "LastName + ', ' + FirstName"
            Me.columnFullName.ReadOnly = true
        End Sub
        
        Public Function NewOurCustomer() As OurCustomer
            Return CType(Me.NewRow,OurCustomer)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OurCustomer(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OurCustomer)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OurCustomerChangedEvent) Is Nothing) Then
                RaiseEvent OurCustomerChanged(Me, New OurCustomerChangeEvent(CType(e.Row,OurCustomer), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OurCustomerChangingEvent) Is Nothing) Then
                RaiseEvent OurCustomerChanging(Me, New OurCustomerChangeEvent(CType(e.Row,OurCustomer), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OurCustomerDeletedEvent) Is Nothing) Then
                RaiseEvent OurCustomerDeleted(Me, New OurCustomerChangeEvent(CType(e.Row,OurCustomer), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OurCustomerDeletingEvent) Is Nothing) Then
                RaiseEvent OurCustomerDeleting(Me, New OurCustomerChangeEvent(CType(e.Row,OurCustomer), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOurCustomer(ByVal row As OurCustomer)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OurCustomer
        Inherits DataRow
        
        Private tableOurCustomers As OurCustomersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOurCustomers = CType(Me.Table,OurCustomersDataTable)
        End Sub
        
        Public Property CustomerID As System.Guid
            Get
                Return CType(Me(Me.tableOurCustomers.CustomerIDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableOurCustomers.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Return CType(Me(Me.tableOurCustomers.FirstNameColumn),String)
            End Get
            Set
                Me(Me.tableOurCustomers.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property LastName As String
            Get
                Return CType(Me(Me.tableOurCustomers.LastNameColumn),String)
            End Get
            Set
                Me(Me.tableOurCustomers.LastNameColumn) = value
            End Set
        End Property
        
        Public Property MiddleName As String
            Get
                If Me.IsMiddleNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableOurCustomers.MiddleNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOurCustomers.MiddleNameColumn) = value
            End Set
        End Property
        
        Public Property Address As String
            Get
                If Me.IsAddressNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableOurCustomers.AddressColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOurCustomers.AddressColumn) = value
            End Set
        End Property
        
        Public Property Apartment As String
            Get
                If Me.IsApartmentNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableOurCustomers.ApartmentColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOurCustomers.ApartmentColumn) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                If Me.IsCityNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableOurCustomers.CityColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOurCustomers.CityColumn) = value
            End Set
        End Property
        
        Public Property State As String
            Get
                If Me.IsStateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableOurCustomers.StateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOurCustomers.StateColumn) = value
            End Set
        End Property
        
        Public Property Zip As String
            Get
                If Me.IsZipNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableOurCustomers.ZipColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOurCustomers.ZipColumn) = value
            End Set
        End Property
        
        Public Property HomePhone As String
            Get
                If Me.IsHomePhoneNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableOurCustomers.HomePhoneColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOurCustomers.HomePhoneColumn) = value
            End Set
        End Property
        
        Public Property BusinessPhone As String
            Get
                If Me.IsBusinessPhoneNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableOurCustomers.BusinessPhoneColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOurCustomers.BusinessPhoneColumn) = value
            End Set
        End Property
        
        Public Property FullName As String
            Get
                Try 
                    Return CType(Me(Me.tableOurCustomers.FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOurCustomers.FullNameColumn) = value
            End Set
        End Property
        
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableOurCustomers.MiddleNameColumn)
        End Function
        
        Public Sub SetMiddleNameNull()
            Me(Me.tableOurCustomers.MiddleNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableOurCustomers.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableOurCustomers.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApartmentNull() As Boolean
            Return Me.IsNull(Me.tableOurCustomers.ApartmentColumn)
        End Function
        
        Public Sub SetApartmentNull()
            Me(Me.tableOurCustomers.ApartmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableOurCustomers.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableOurCustomers.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableOurCustomers.StateColumn)
        End Function
        
        Public Sub SetStateNull()
            Me(Me.tableOurCustomers.StateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tableOurCustomers.ZipColumn)
        End Function
        
        Public Sub SetZipNull()
            Me(Me.tableOurCustomers.ZipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHomePhoneNull() As Boolean
            Return Me.IsNull(Me.tableOurCustomers.HomePhoneColumn)
        End Function
        
        Public Sub SetHomePhoneNull()
            Me(Me.tableOurCustomers.HomePhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBusinessPhoneNull() As Boolean
            Return Me.IsNull(Me.tableOurCustomers.BusinessPhoneColumn)
        End Function
        
        Public Sub SetBusinessPhoneNull()
            Me(Me.tableOurCustomers.BusinessPhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tableOurCustomers.FullNameColumn)
        End Function
        
        Public Sub SetFullNameNull()
            Me(Me.tableOurCustomers.FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Invoices() As TheirInvoice()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("CustomerInvoice")),TheirInvoice())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OurCustomerChangeEvent
        Inherits EventArgs
        
        Private eventRow As OurCustomer
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OurCustomer, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OurCustomer
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TheirInvoicesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInvoiceID As DataColumn
        
        Private columnInvoiceNumber As DataColumn
        
        Private columnInvoiceDate As DataColumn
        
        Private columnTerms As DataColumn
        
        Private columnFOB As DataColumn
        
        Private columnPO As DataColumn
        
        Private columnCustomerID As DataColumn
        
        Friend Sub New()
            MyBase.New("Invoice")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceIDColumn As DataColumn
            Get
                Return Me.columnInvoiceID
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceNumberColumn As DataColumn
            Get
                Return Me.columnInvoiceNumber
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceDateColumn As DataColumn
            Get
                Return Me.columnInvoiceDate
            End Get
        End Property
        
        Friend ReadOnly Property TermsColumn As DataColumn
            Get
                Return Me.columnTerms
            End Get
        End Property
        
        Friend ReadOnly Property FOBColumn As DataColumn
            Get
                Return Me.columnFOB
            End Get
        End Property
        
        Friend ReadOnly Property POColumn As DataColumn
            Get
                Return Me.columnPO
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TheirInvoice
            Get
                Return CType(Me.Rows(index),TheirInvoice)
            End Get
        End Property
        
        Public Event TheirInvoiceChanged As TheirInvoiceChangeEventHandler
        
        Public Event TheirInvoiceChanging As TheirInvoiceChangeEventHandler
        
        Public Event TheirInvoiceDeleted As TheirInvoiceChangeEventHandler
        
        Public Event TheirInvoiceDeleting As TheirInvoiceChangeEventHandler
        
        Public Overloads Sub AddTheirInvoice(ByVal row As TheirInvoice)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTheirInvoice(ByVal InvoiceID As System.Guid, ByVal InvoiceDate As Date, ByVal Terms As String, ByVal FOB As String, ByVal PO As String, ByVal parentOurCustomerByCustomerInvoice As OurCustomer) As TheirInvoice
            Dim rowTheirInvoice As TheirInvoice = CType(Me.NewRow,TheirInvoice)
            rowTheirInvoice.ItemArray = New Object() {InvoiceID, Nothing, InvoiceDate, Terms, FOB, PO, parentOurCustomerByCustomerInvoice(0)}
            Me.Rows.Add(rowTheirInvoice)
            Return rowTheirInvoice
        End Function
        
        Public Function FindByInvoiceID(ByVal InvoiceID As System.Guid) As TheirInvoice
            Return CType(Me.Rows.Find(New Object() {InvoiceID}),TheirInvoice)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TheirInvoicesDataTable = CType(MyBase.Clone,TheirInvoicesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TheirInvoicesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInvoiceID = Me.Columns("InvoiceID")
            Me.columnInvoiceNumber = Me.Columns("InvoiceNumber")
            Me.columnInvoiceDate = Me.Columns("InvoiceDate")
            Me.columnTerms = Me.Columns("Terms")
            Me.columnFOB = Me.Columns("FOB")
            Me.columnPO = Me.Columns("PO")
            Me.columnCustomerID = Me.Columns("CustomerID")
        End Sub
        
        Private Sub InitClass()
            Me.columnInvoiceID = New DataColumn("InvoiceID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceID)
            Me.columnInvoiceNumber = New DataColumn("InvoiceNumber", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceNumber)
            Me.columnInvoiceDate = New DataColumn("InvoiceDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceDate)
            Me.columnTerms = New DataColumn("Terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerms)
            Me.columnFOB = New DataColumn("FOB", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFOB)
            Me.columnPO = New DataColumn("PO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPO)
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.Constraints.Add(New UniqueConstraint("ADONETKey2", New DataColumn() {Me.columnInvoiceID}, true))
            Me.columnInvoiceID.AllowDBNull = false
            Me.columnInvoiceID.Unique = true
            Me.columnInvoiceNumber.AutoIncrement = true
            Me.columnInvoiceNumber.AllowDBNull = false
            Me.columnInvoiceNumber.ReadOnly = true
            Me.columnInvoiceDate.AllowDBNull = false
        End Sub
        
        Public Function NewTheirInvoice() As TheirInvoice
            Return CType(Me.NewRow,TheirInvoice)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TheirInvoice(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TheirInvoice)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TheirInvoiceChangedEvent) Is Nothing) Then
                RaiseEvent TheirInvoiceChanged(Me, New TheirInvoiceChangeEvent(CType(e.Row,TheirInvoice), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TheirInvoiceChangingEvent) Is Nothing) Then
                RaiseEvent TheirInvoiceChanging(Me, New TheirInvoiceChangeEvent(CType(e.Row,TheirInvoice), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TheirInvoiceDeletedEvent) Is Nothing) Then
                RaiseEvent TheirInvoiceDeleted(Me, New TheirInvoiceChangeEvent(CType(e.Row,TheirInvoice), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TheirInvoiceDeletingEvent) Is Nothing) Then
                RaiseEvent TheirInvoiceDeleting(Me, New TheirInvoiceChangeEvent(CType(e.Row,TheirInvoice), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTheirInvoice(ByVal row As TheirInvoice)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TheirInvoice
        Inherits DataRow
        
        Private tableTheirInvoices As TheirInvoicesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTheirInvoices = CType(Me.Table,TheirInvoicesDataTable)
        End Sub
        
        Public Property InvoiceID As System.Guid
            Get
                Return CType(Me(Me.tableTheirInvoices.InvoiceIDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableTheirInvoices.InvoiceIDColumn) = value
            End Set
        End Property
        
        Public Property InvoiceNumber As Integer
            Get
                Return CType(Me(Me.tableTheirInvoices.InvoiceNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableTheirInvoices.InvoiceNumberColumn) = value
            End Set
        End Property
        
        Public Property InvoiceDate As Date
            Get
                Return CType(Me(Me.tableTheirInvoices.InvoiceDateColumn),Date)
            End Get
            Set
                Me(Me.tableTheirInvoices.InvoiceDateColumn) = value
            End Set
        End Property
        
        Public Property Terms As String
            Get
                If Me.IsTermsNull Then
                    Return "Net 30"
                Else
                    Return CType(Me(Me.tableTheirInvoices.TermsColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTheirInvoices.TermsColumn) = value
            End Set
        End Property
        
        Public Property FOB As String
            Get
                Try 
                    Return CType(Me(Me.tableTheirInvoices.FOBColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTheirInvoices.FOBColumn) = value
            End Set
        End Property
        
        Public Property PO As String
            Get
                Try 
                    Return CType(Me(Me.tableTheirInvoices.POColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTheirInvoices.POColumn) = value
            End Set
        End Property
        
        Public Property CustomerID As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableTheirInvoices.CustomerIDColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTheirInvoices.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property Customer As OurCustomer
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CustomerInvoice")),OurCustomer)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CustomerInvoice"))
            End Set
        End Property
        
        Public Function IsTermsNull() As Boolean
            Return Me.IsNull(Me.tableTheirInvoices.TermsColumn)
        End Function
        
        Public Sub SetTermsNull()
            Me(Me.tableTheirInvoices.TermsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFOBNull() As Boolean
            Return Me.IsNull(Me.tableTheirInvoices.FOBColumn)
        End Function
        
        Public Sub SetFOBNull()
            Me(Me.tableTheirInvoices.FOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPONull() As Boolean
            Return Me.IsNull(Me.tableTheirInvoices.POColumn)
        End Function
        
        Public Sub SetPONull()
            Me(Me.tableTheirInvoices.POColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tableTheirInvoices.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tableTheirInvoices.CustomerIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TheirInvoiceChangeEvent
        Inherits EventArgs
        
        Private eventRow As TheirInvoice
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TheirInvoice, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TheirInvoice
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
