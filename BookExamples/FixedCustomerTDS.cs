//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BookExamples 
{
  using System;
  using System.Data;
  using System.Xml;
  using System.Runtime.Serialization;
    
    
  [Serializable()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Diagnostics.DebuggerStepThrough()]
  [System.ComponentModel.ToolboxItem(true)]
  public class FixedCustomerTDS : DataSet 
  {
        
    private CustomerDataTable tableCustomer;
        
    private InvoiceDataTable tableInvoice;
        
    private DataRelation relationCustomerInvoice;
        
    public FixedCustomerTDS() 
    {
      this.InitClass();
      System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
      this.Tables.CollectionChanged += schemaChangedHandler;
      this.Relations.CollectionChanged += schemaChangedHandler;
    }
        
    protected FixedCustomerTDS(SerializationInfo info, StreamingContext context) 
    {
      string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
      if ((strSchema != null)) 
      {
        DataSet ds = new DataSet();
        ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
        if ((ds.Tables["Customer"] != null)) 
        {
          this.Tables.Add(CreateCustomerDataTable(ds.Tables["Customer"]));
        }
        if ((ds.Tables["Invoice"] != null)) 
        {
          this.Tables.Add(CreateInvoiceDataTable(ds.Tables["Invoice"]));
        }
        this.DataSetName = ds.DataSetName;
        this.Prefix = ds.Prefix;
        this.Namespace = ds.Namespace;
        this.Locale = ds.Locale;
        this.CaseSensitive = ds.CaseSensitive;
        this.EnforceConstraints = ds.EnforceConstraints;
        this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
        this.InitVars();
      }
      else 
      {
        this.InitClass();
      }
      this.GetSerializationData(info, context);
      System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
      this.Tables.CollectionChanged += schemaChangedHandler;
      this.Relations.CollectionChanged += schemaChangedHandler;
    }
        
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public CustomerDataTable Customer 
    {
      get 
      {
        return this.tableCustomer;
      }
    }

    protected virtual CustomerDataTable CreateCustomerDataTable(DataTable table) 
    { 
      if (table == null) return new CustomerDataTable();
      else return new CustomerDataTable(table);
    }
        
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public InvoiceDataTable Invoice 
    {
      get 
      {
        return this.tableInvoice;
      }
    }

    protected virtual InvoiceDataTable CreateInvoiceDataTable(DataTable table) 
    { 
      if (table == null) return new InvoiceDataTable();
      else return new InvoiceDataTable(table);
    }
        
    public override DataSet Clone() 
    {
      FixedCustomerTDS cln = ((FixedCustomerTDS)(base.Clone()));
      cln.InitVars();
      return cln;
    }
        
    protected override bool ShouldSerializeTables() 
    {
      return false;
    }
        
    protected override bool ShouldSerializeRelations() 
    {
      return false;
    }
        
    protected override void ReadXmlSerializable(XmlReader reader) 
    {
      this.Reset();
      DataSet ds = new DataSet();
      ds.ReadXml(reader);
      if ((ds.Tables["Customer"] != null)) 
      {
        this.Tables.Add(CreateCustomerDataTable(ds.Tables["Customer"]));
      }
      if ((ds.Tables["Invoice"] != null)) 
      {
        this.Tables.Add(CreateInvoiceDataTable(ds.Tables["Invoice"]));
      }
      this.DataSetName = ds.DataSetName;
      this.Prefix = ds.Prefix;
      this.Namespace = ds.Namespace;
      this.Locale = ds.Locale;
      this.CaseSensitive = ds.CaseSensitive;
      this.EnforceConstraints = ds.EnforceConstraints;
      this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
      this.InitVars();
    }
        
    protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() 
    {
      System.IO.MemoryStream stream = new System.IO.MemoryStream();
      this.WriteXmlSchema(new XmlTextWriter(stream, null));
      stream.Position = 0;
      return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
    }
        
    internal void InitVars() 
    {
      this.tableCustomer = ((CustomerDataTable)(this.Tables["Customer"]));
      if ((this.tableCustomer != null)) 
      {
        this.tableCustomer.InitVars();
      }
      this.tableInvoice = ((InvoiceDataTable)(this.Tables["Invoice"]));
      if ((this.tableInvoice != null)) 
      {
        this.tableInvoice.InitVars();
      }
      this.relationCustomerInvoice = this.Relations["CustomerInvoice"];
    }
        
    private void InitClass() 
    {
      this.DataSetName = "FixedCustomerTDS";
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/ADONET.xsd";
      this.Locale = new System.Globalization.CultureInfo("en-US");
      this.CaseSensitive = false;
      this.EnforceConstraints = true;
      this.tableCustomer = CreateCustomerDataTable(null);
      this.Tables.Add(this.tableCustomer);
      this.tableInvoice = CreateInvoiceDataTable(null);
      this.Tables.Add(this.tableInvoice);
      ForeignKeyConstraint fkc;
      fkc = new ForeignKeyConstraint("CustomerInvoice", new DataColumn[] {
                                                                           this.tableCustomer.CustomerIDColumn}, new DataColumn[] {
                                                                                                                                    this.tableInvoice.CustomerIDColumn});
      this.tableInvoice.Constraints.Add(fkc);
      fkc.AcceptRejectRule = AcceptRejectRule.Cascade;
      fkc.DeleteRule = Rule.Cascade;
      fkc.UpdateRule = Rule.Cascade;
      this.relationCustomerInvoice = new DataRelation("CustomerInvoice", new DataColumn[] {
                                                                                            this.tableCustomer.CustomerIDColumn}, new DataColumn[] {
                                                                                                                                                     this.tableInvoice.CustomerIDColumn}, false);
      this.Relations.Add(this.relationCustomerInvoice);
    }
        
    private bool ShouldSerializeCustomer() 
    {
      return false;
    }
        
    private bool ShouldSerializeInvoice() 
    {
      return false;
    }
        
    private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) 
    {
      if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) 
      {
        this.InitVars();
      }
    }
        
    public delegate void CustomerRowChangeEventHandler(object sender, CustomerRowChangeEvent e);
        
    public delegate void InvoiceRowChangeEventHandler(object sender, InvoiceRowChangeEvent e);
        
    [System.Diagnostics.DebuggerStepThrough()]
      public class CustomerDataTable : DataTable, System.Collections.IEnumerable 
    {
            
      private DataColumn columnCustomerID;
            
      private DataColumn columnFirstName;
            
      private DataColumn columnLastName;
            
      private DataColumn columnMiddleName;
            
      private DataColumn columnAddress;
            
      private DataColumn columnApartment;
            
      private DataColumn columnCity;
            
      private DataColumn columnState;
            
      private DataColumn columnZip;
            
      private DataColumn columnHomePhone;
            
      private DataColumn columnBusinessPhone;
            
      private DataColumn columnFullName;
            
      internal CustomerDataTable() : 
        base("Customer") 
      {
        this.InitClass();
      }
            
      internal CustomerDataTable(DataTable table) : 
        base(table.TableName) 
      {
        if ((table.CaseSensitive != table.DataSet.CaseSensitive)) 
        {
          this.CaseSensitive = table.CaseSensitive;
        }
        if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) 
        {
          this.Locale = table.Locale;
        }
        if ((table.Namespace != table.DataSet.Namespace)) 
        {
          this.Namespace = table.Namespace;
        }
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
        this.DisplayExpression = table.DisplayExpression;
      }
            
      [System.ComponentModel.Browsable(false)]
      public int Count 
      {
        get 
        {
          return this.Rows.Count;
        }
      }
            
      internal DataColumn CustomerIDColumn 
      {
        get 
        {
          return this.columnCustomerID;
        }
      }
            
      internal DataColumn FirstNameColumn 
      {
        get 
        {
          return this.columnFirstName;
        }
      }
            
      internal DataColumn LastNameColumn 
      {
        get 
        {
          return this.columnLastName;
        }
      }
            
      internal DataColumn MiddleNameColumn 
      {
        get 
        {
          return this.columnMiddleName;
        }
      }
            
      internal DataColumn AddressColumn 
      {
        get 
        {
          return this.columnAddress;
        }
      }
            
      internal DataColumn ApartmentColumn 
      {
        get 
        {
          return this.columnApartment;
        }
      }
            
      internal DataColumn CityColumn 
      {
        get 
        {
          return this.columnCity;
        }
      }
            
      internal DataColumn StateColumn 
      {
        get 
        {
          return this.columnState;
        }
      }
            
      internal DataColumn ZipColumn 
      {
        get 
        {
          return this.columnZip;
        }
      }
            
      internal DataColumn HomePhoneColumn 
      {
        get 
        {
          return this.columnHomePhone;
        }
      }
            
      internal DataColumn BusinessPhoneColumn 
      {
        get 
        {
          return this.columnBusinessPhone;
        }
      }
            
      internal DataColumn FullNameColumn 
      {
        get 
        {
          return this.columnFullName;
        }
      }
            
      public CustomerRow this[int index] 
      {
        get 
        {
          return ((CustomerRow)(this.Rows[index]));
        }
      }
            
      public event CustomerRowChangeEventHandler CustomerRowChanged;
            
      public event CustomerRowChangeEventHandler CustomerRowChanging;
            
      public event CustomerRowChangeEventHandler CustomerRowDeleted;
            
      public event CustomerRowChangeEventHandler CustomerRowDeleting;
            
      public void AddCustomerRow(CustomerRow row) 
      {
        this.Rows.Add(row);
      }
            
      public CustomerRow AddCustomerRow(System.Guid CustomerID, string FirstName, string LastName, string MiddleName, string Address, string Apartment, string City, string State, string Zip, string HomePhone, string BusinessPhone, string FullName) 
      {
        CustomerRow rowCustomerRow = ((CustomerRow)(this.NewRow()));
        rowCustomerRow.ItemArray = new object[] {
                                                  CustomerID,
                                                  FirstName,
                                                  LastName,
                                                  MiddleName,
                                                  Address,
                                                  Apartment,
                                                  City,
                                                  State,
                                                  Zip,
                                                  HomePhone,
                                                  BusinessPhone,
                                                  FullName};
        this.Rows.Add(rowCustomerRow);
        return rowCustomerRow;
      }
            
      public CustomerRow FindByCustomerID(System.Guid CustomerID) 
      {
        return ((CustomerRow)(this.Rows.Find(new object[] {
                                                            CustomerID})));
      }
            
      public System.Collections.IEnumerator GetEnumerator() 
      {
        return this.Rows.GetEnumerator();
      }
            
      public override DataTable Clone() 
      {
        CustomerDataTable cln = ((CustomerDataTable)(base.Clone()));
        cln.InitVars();
        return cln;
      }
            
      protected override DataTable CreateInstance() 
      {
        return new CustomerDataTable();
      }
            
      internal void InitVars() 
      {
        this.columnCustomerID = this.Columns["CustomerID"];
        this.columnFirstName = this.Columns["FirstName"];
        this.columnLastName = this.Columns["LastName"];
        this.columnMiddleName = this.Columns["MiddleName"];
        this.columnAddress = this.Columns["Address"];
        this.columnApartment = this.Columns["Apartment"];
        this.columnCity = this.Columns["City"];
        this.columnState = this.Columns["State"];
        this.columnZip = this.Columns["Zip"];
        this.columnHomePhone = this.Columns["HomePhone"];
        this.columnBusinessPhone = this.Columns["BusinessPhone"];
        this.columnFullName = this.Columns["FullName"];
      }
            
      private void InitClass() 
      {
        this.columnCustomerID = new DataColumn("CustomerID", typeof(System.Guid), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnCustomerID);
        this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnFirstName);
        this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnLastName);
        this.columnMiddleName = new DataColumn("MiddleName", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnMiddleName);
        this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnAddress);
        this.columnApartment = new DataColumn("Apartment", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnApartment);
        this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnCity);
        this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnState);
        this.columnZip = new DataColumn("Zip", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnZip);
        this.columnHomePhone = new DataColumn("HomePhone", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnHomePhone);
        this.columnBusinessPhone = new DataColumn("BusinessPhone", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnBusinessPhone);
        this.columnFullName = new DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnFullName);
        this.Constraints.Add(new UniqueConstraint("ADONETKey1", new DataColumn[] {
                                                                                   this.columnCustomerID}, true));
        this.Constraints.Add(new UniqueConstraint("UniqueHomePhone", new DataColumn[] {
                                                                                        this.columnHomePhone,
                                                                                        this.columnBusinessPhone}, false));
        this.columnCustomerID.AllowDBNull = false;
        this.columnCustomerID.Unique = true;
        this.columnFirstName.AllowDBNull = false;
        this.columnLastName.AllowDBNull = false;
        this.columnFullName.Expression = "LastName + \', \' + FirstName";
        this.columnFullName.ReadOnly = true;
      }
            
      public CustomerRow NewCustomerRow() 
      {
        return ((CustomerRow)(this.NewRow()));
      }
            
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) 
      {
        return new CustomerRow(builder);
      }
            
      protected override System.Type GetRowType() 
      {
        return typeof(CustomerRow);
      }
            
      protected override void OnRowChanged(DataRowChangeEventArgs e) 
      {
        base.OnRowChanged(e);
        if ((this.CustomerRowChanged != null)) 
        {
          this.CustomerRowChanged(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
        }
      }
            
      protected override void OnRowChanging(DataRowChangeEventArgs e) 
      {
        base.OnRowChanging(e);
        if ((this.CustomerRowChanging != null)) 
        {
          this.CustomerRowChanging(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
        }
      }
            
      protected override void OnRowDeleted(DataRowChangeEventArgs e) 
      {
        base.OnRowDeleted(e);
        if ((this.CustomerRowDeleted != null)) 
        {
          this.CustomerRowDeleted(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
        }
      }
            
      protected override void OnRowDeleting(DataRowChangeEventArgs e) 
      {
        base.OnRowDeleting(e);
        if ((this.CustomerRowDeleting != null)) 
        {
          this.CustomerRowDeleting(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
        }
      }
            
      public void RemoveCustomerRow(CustomerRow row) 
      {
        this.Rows.Remove(row);
      }
    }
        
    [System.Diagnostics.DebuggerStepThrough()]
      public class CustomerRow : DataRow 
    {
            
      private CustomerDataTable tableCustomer;
            
      internal CustomerRow(DataRowBuilder rb) : 
        base(rb) 
      {
        this.tableCustomer = ((CustomerDataTable)(this.Table));
      }
            
      public System.Guid CustomerID 
      {
        get 
        {
          return ((System.Guid)(this[this.tableCustomer.CustomerIDColumn]));
        }
        set 
        {
          this[this.tableCustomer.CustomerIDColumn] = value;
        }
      }
            
      public string FirstName 
      {
        get 
        {
          return ((string)(this[this.tableCustomer.FirstNameColumn]));
        }
        set 
        {
          this[this.tableCustomer.FirstNameColumn] = value;
        }
      }
            
      public string LastName 
      {
        get 
        {
          return ((string)(this[this.tableCustomer.LastNameColumn]));
        }
        set 
        {
          this[this.tableCustomer.LastNameColumn] = value;
        }
      }
            
      public string MiddleName 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableCustomer.MiddleNameColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableCustomer.MiddleNameColumn] = value;
        }
      }
            
      public string Address 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableCustomer.AddressColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableCustomer.AddressColumn] = value;
        }
      }
            
      public string Apartment 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableCustomer.ApartmentColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableCustomer.ApartmentColumn] = value;
        }
      }
            
      public string City 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableCustomer.CityColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableCustomer.CityColumn] = value;
        }
      }
            
      public string State 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableCustomer.StateColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableCustomer.StateColumn] = value;
        }
      }
            
      public string Zip 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableCustomer.ZipColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableCustomer.ZipColumn] = value;
        }
      }
            
      public string HomePhone 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableCustomer.HomePhoneColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableCustomer.HomePhoneColumn] = value;
        }
      }
            
      public string BusinessPhone 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableCustomer.BusinessPhoneColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableCustomer.BusinessPhoneColumn] = value;
        }
      }
            
      public string FullName 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableCustomer.FullNameColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableCustomer.FullNameColumn] = value;
        }
      }
            
      public bool IsMiddleNameNull() 
      {
        return this.IsNull(this.tableCustomer.MiddleNameColumn);
      }
            
      public void SetMiddleNameNull() 
      {
        this[this.tableCustomer.MiddleNameColumn] = System.Convert.DBNull;
      }
            
      public bool IsAddressNull() 
      {
        return this.IsNull(this.tableCustomer.AddressColumn);
      }
            
      public void SetAddressNull() 
      {
        this[this.tableCustomer.AddressColumn] = System.Convert.DBNull;
      }
            
      public bool IsApartmentNull() 
      {
        return this.IsNull(this.tableCustomer.ApartmentColumn);
      }
            
      public void SetApartmentNull() 
      {
        this[this.tableCustomer.ApartmentColumn] = System.Convert.DBNull;
      }
            
      public bool IsCityNull() 
      {
        return this.IsNull(this.tableCustomer.CityColumn);
      }
            
      public void SetCityNull() 
      {
        this[this.tableCustomer.CityColumn] = System.Convert.DBNull;
      }
            
      public bool IsStateNull() 
      {
        return this.IsNull(this.tableCustomer.StateColumn);
      }
            
      public void SetStateNull() 
      {
        this[this.tableCustomer.StateColumn] = System.Convert.DBNull;
      }
            
      public bool IsZipNull() 
      {
        return this.IsNull(this.tableCustomer.ZipColumn);
      }
            
      public void SetZipNull() 
      {
        this[this.tableCustomer.ZipColumn] = System.Convert.DBNull;
      }
            
      public bool IsHomePhoneNull() 
      {
        return this.IsNull(this.tableCustomer.HomePhoneColumn);
      }
            
      public void SetHomePhoneNull() 
      {
        this[this.tableCustomer.HomePhoneColumn] = System.Convert.DBNull;
      }
            
      public bool IsBusinessPhoneNull() 
      {
        return this.IsNull(this.tableCustomer.BusinessPhoneColumn);
      }
            
      public void SetBusinessPhoneNull() 
      {
        this[this.tableCustomer.BusinessPhoneColumn] = System.Convert.DBNull;
      }
            
      public bool IsFullNameNull() 
      {
        return this.IsNull(this.tableCustomer.FullNameColumn);
      }
            
      public void SetFullNameNull() 
      {
        this[this.tableCustomer.FullNameColumn] = System.Convert.DBNull;
      }
            
      public InvoiceRow[] GetInvoiceRows() 
      {
        return ((InvoiceRow[])(this.GetChildRows(this.Table.ChildRelations["CustomerInvoice"])));
      }
    }
        
    [System.Diagnostics.DebuggerStepThrough()]
      public class CustomerRowChangeEvent : EventArgs 
    {
            
      private CustomerRow eventRow;
            
      private DataRowAction eventAction;
            
      public CustomerRowChangeEvent(CustomerRow row, DataRowAction action) 
      {
        this.eventRow = row;
        this.eventAction = action;
      }
            
      public CustomerRow Row 
      {
        get 
        {
          return this.eventRow;
        }
      }
            
      public DataRowAction Action 
      {
        get 
        {
          return this.eventAction;
        }
      }
    }
        
    [System.Diagnostics.DebuggerStepThrough()]
      public class InvoiceDataTable : DataTable, System.Collections.IEnumerable 
    {
            
      private DataColumn columnInvoiceID;
            
      private DataColumn columnInvoiceNumber;
            
      private DataColumn columnInvoiceDate;
            
      private DataColumn columnTerms;
            
      private DataColumn columnFOB;
            
      private DataColumn columnPO;
            
      private DataColumn columnCustomerID;
            
      internal InvoiceDataTable() : 
        base("Invoice") 
      {
        this.InitClass();
      }
            
      internal InvoiceDataTable(DataTable table) : 
        base(table.TableName) 
      {
        if ((table.CaseSensitive != table.DataSet.CaseSensitive)) 
        {
          this.CaseSensitive = table.CaseSensitive;
        }
        if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) 
        {
          this.Locale = table.Locale;
        }
        if ((table.Namespace != table.DataSet.Namespace)) 
        {
          this.Namespace = table.Namespace;
        }
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
        this.DisplayExpression = table.DisplayExpression;
      }
            
      [System.ComponentModel.Browsable(false)]
      public int Count 
      {
        get 
        {
          return this.Rows.Count;
        }
      }
            
      internal DataColumn InvoiceIDColumn 
      {
        get 
        {
          return this.columnInvoiceID;
        }
      }
            
      internal DataColumn InvoiceNumberColumn 
      {
        get 
        {
          return this.columnInvoiceNumber;
        }
      }
            
      internal DataColumn InvoiceDateColumn 
      {
        get 
        {
          return this.columnInvoiceDate;
        }
      }
            
      internal DataColumn TermsColumn 
      {
        get 
        {
          return this.columnTerms;
        }
      }
            
      internal DataColumn FOBColumn 
      {
        get 
        {
          return this.columnFOB;
        }
      }
            
      internal DataColumn POColumn 
      {
        get 
        {
          return this.columnPO;
        }
      }
            
      internal DataColumn CustomerIDColumn 
      {
        get 
        {
          return this.columnCustomerID;
        }
      }
            
      public InvoiceRow this[int index] 
      {
        get 
        {
          return ((InvoiceRow)(this.Rows[index]));
        }
      }
            
      public event InvoiceRowChangeEventHandler InvoiceRowChanged;
            
      public event InvoiceRowChangeEventHandler InvoiceRowChanging;
            
      public event InvoiceRowChangeEventHandler InvoiceRowDeleted;
            
      public event InvoiceRowChangeEventHandler InvoiceRowDeleting;
            
      public void AddInvoiceRow(InvoiceRow row) 
      {
        this.Rows.Add(row);
      }
            
      public InvoiceRow AddInvoiceRow(System.Guid InvoiceID, System.DateTime InvoiceDate, string Terms, string FOB, string PO, CustomerRow parentCustomerRowByCustomerInvoice) 
      {
        InvoiceRow rowInvoiceRow = ((InvoiceRow)(this.NewRow()));
        rowInvoiceRow.ItemArray = new object[] {
                                                 InvoiceID,
                                                 null,
                                                 InvoiceDate,
                                                 Terms,
                                                 FOB,
                                                 PO,
                                                 parentCustomerRowByCustomerInvoice[0]};
        this.Rows.Add(rowInvoiceRow);
        return rowInvoiceRow;
      }
            
      public InvoiceRow FindByInvoiceID(System.Guid InvoiceID) 
      {
        return ((InvoiceRow)(this.Rows.Find(new object[] {
                                                           InvoiceID})));
      }
            
      public System.Collections.IEnumerator GetEnumerator() 
      {
        return this.Rows.GetEnumerator();
      }
            
      public override DataTable Clone() 
      {
        InvoiceDataTable cln = ((InvoiceDataTable)(base.Clone()));
        cln.InitVars();
        return cln;
      }
            
      protected override DataTable CreateInstance() 
      {
        return new InvoiceDataTable();
      }
            
      internal void InitVars() 
      {
        this.columnInvoiceID = this.Columns["InvoiceID"];
        this.columnInvoiceNumber = this.Columns["InvoiceNumber"];
        this.columnInvoiceDate = this.Columns["InvoiceDate"];
        this.columnTerms = this.Columns["Terms"];
        this.columnFOB = this.Columns["FOB"];
        this.columnPO = this.Columns["PO"];
        this.columnCustomerID = this.Columns["CustomerID"];
      }
            
      private void InitClass() 
      {
        this.columnInvoiceID = new DataColumn("InvoiceID", typeof(System.Guid), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnInvoiceID);
        this.columnInvoiceNumber = new DataColumn("InvoiceNumber", typeof(int), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnInvoiceNumber);
        this.columnInvoiceDate = new DataColumn("InvoiceDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnInvoiceDate);
        this.columnTerms = new DataColumn("Terms", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnTerms);
        this.columnFOB = new DataColumn("FOB", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnFOB);
        this.columnPO = new DataColumn("PO", typeof(string), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnPO);
        this.columnCustomerID = new DataColumn("CustomerID", typeof(System.Guid), null, System.Data.MappingType.Element);
        this.Columns.Add(this.columnCustomerID);
        this.Constraints.Add(new UniqueConstraint("ADONETKey2", new DataColumn[] {
                                                                                   this.columnInvoiceID}, true));
        this.columnInvoiceID.AllowDBNull = false;
        this.columnInvoiceID.Unique = true;
        this.columnInvoiceNumber.AutoIncrement = true;
        this.columnInvoiceNumber.AllowDBNull = false;
        this.columnInvoiceNumber.ReadOnly = true;
        this.columnInvoiceDate.AllowDBNull = false;
      }
            
      public InvoiceRow NewInvoiceRow() 
      {
        return ((InvoiceRow)(this.NewRow()));
      }
            
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) 
      {
        return new InvoiceRow(builder);
      }
            
      protected override System.Type GetRowType() 
      {
        return typeof(InvoiceRow);
      }
            
      protected override void OnRowChanged(DataRowChangeEventArgs e) 
      {
        base.OnRowChanged(e);
        if ((this.InvoiceRowChanged != null)) 
        {
          this.InvoiceRowChanged(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
        }
      }
            
      protected override void OnRowChanging(DataRowChangeEventArgs e) 
      {
        base.OnRowChanging(e);
        if ((this.InvoiceRowChanging != null)) 
        {
          this.InvoiceRowChanging(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
        }
      }
            
      protected override void OnRowDeleted(DataRowChangeEventArgs e) 
      {
        base.OnRowDeleted(e);
        if ((this.InvoiceRowDeleted != null)) 
        {
          this.InvoiceRowDeleted(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
        }
      }
            
      protected override void OnRowDeleting(DataRowChangeEventArgs e) 
      {
        base.OnRowDeleting(e);
        if ((this.InvoiceRowDeleting != null)) 
        {
          this.InvoiceRowDeleting(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
        }
      }
            
      public void RemoveInvoiceRow(InvoiceRow row) 
      {
        this.Rows.Remove(row);
      }
    }
        
    [System.Diagnostics.DebuggerStepThrough()]
      public class InvoiceRow : DataRow 
    {
            
      private InvoiceDataTable tableInvoice;
            
      internal InvoiceRow(DataRowBuilder rb) : 
        base(rb) 
      {
        this.tableInvoice = ((InvoiceDataTable)(this.Table));
      }
            
      public System.Guid InvoiceID 
      {
        get 
        {
          return ((System.Guid)(this[this.tableInvoice.InvoiceIDColumn]));
        }
        set 
        {
          this[this.tableInvoice.InvoiceIDColumn] = value;
        }
      }
            
      public int InvoiceNumber 
      {
        get 
        {
          return ((int)(this[this.tableInvoice.InvoiceNumberColumn]));
        }
        set 
        {
          this[this.tableInvoice.InvoiceNumberColumn] = value;
        }
      }
            
      public System.DateTime InvoiceDate 
      {
        get 
        {
          return ((System.DateTime)(this[this.tableInvoice.InvoiceDateColumn]));
        }
        set 
        {
          this[this.tableInvoice.InvoiceDateColumn] = value;
        }
      }
            
      public string Terms 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableInvoice.TermsColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableInvoice.TermsColumn] = value;
        }
      }
            
      public string FOB 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableInvoice.FOBColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableInvoice.FOBColumn] = value;
        }
      }
            
      public string PO 
      {
        get 
        {
          try 
          {
            return ((string)(this[this.tableInvoice.POColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableInvoice.POColumn] = value;
        }
      }
            
      public System.Guid CustomerID 
      {
        get 
        {
          try 
          {
            return ((System.Guid)(this[this.tableInvoice.CustomerIDColumn]));
          }
          catch (InvalidCastException e) 
          {
            throw new StrongTypingException("Cannot get value because it is DBNull.", e);
          }
        }
        set 
        {
          this[this.tableInvoice.CustomerIDColumn] = value;
        }
      }
            
      public CustomerRow CustomerRow 
      {
        get 
        {
          return ((CustomerRow)(this.GetParentRow(this.Table.ParentRelations["CustomerInvoice"])));
        }
        set 
        {
          this.SetParentRow(value, this.Table.ParentRelations["CustomerInvoice"]);
        }
      }
            
      public bool IsTermsNull() 
      {
        return this.IsNull(this.tableInvoice.TermsColumn);
      }
            
      public void SetTermsNull() 
      {
        this[this.tableInvoice.TermsColumn] = System.Convert.DBNull;
      }
            
      public bool IsFOBNull() 
      {
        return this.IsNull(this.tableInvoice.FOBColumn);
      }
            
      public void SetFOBNull() 
      {
        this[this.tableInvoice.FOBColumn] = System.Convert.DBNull;
      }
            
      public bool IsPONull() 
      {
        return this.IsNull(this.tableInvoice.POColumn);
      }
            
      public void SetPONull() 
      {
        this[this.tableInvoice.POColumn] = System.Convert.DBNull;
      }
            
      public bool IsCustomerIDNull() 
      {
        return this.IsNull(this.tableInvoice.CustomerIDColumn);
      }
            
      public void SetCustomerIDNull() 
      {
        this[this.tableInvoice.CustomerIDColumn] = System.Convert.DBNull;
      }
    }
        
    [System.Diagnostics.DebuggerStepThrough()]
      public class InvoiceRowChangeEvent : EventArgs 
    {
            
      private InvoiceRow eventRow;
            
      private DataRowAction eventAction;
            
      public InvoiceRowChangeEvent(InvoiceRow row, DataRowAction action) 
      {
        this.eventRow = row;
        this.eventAction = action;
      }
            
      public InvoiceRow Row 
      {
        get 
        {
          return this.eventRow;
        }
      }
            
      public DataRowAction Action 
      {
        get 
        {
          return this.eventAction;
        }
      }
    }
  }
}

