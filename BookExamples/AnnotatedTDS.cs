//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BookExamples {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AnnotatedTDS : DataSet {
        
        private OurCustomersDataTable tableOurCustomers;
        
        private TheirInvoicesDataTable tableTheirInvoices;
        
        private DataRelation relationCustomerInvoice;
        
        public AnnotatedTDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AnnotatedTDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Customer"] != null)) {
                    this.Tables.Add(new OurCustomersDataTable(ds.Tables["Customer"]));
                }
                if ((ds.Tables["Invoice"] != null)) {
                    this.Tables.Add(new TheirInvoicesDataTable(ds.Tables["Invoice"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OurCustomersDataTable OurCustomers {
            get {
                return this.tableOurCustomers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TheirInvoicesDataTable TheirInvoices {
            get {
                return this.tableTheirInvoices;
            }
        }
        
        public override DataSet Clone() {
            AnnotatedTDS cln = ((AnnotatedTDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Customer"] != null)) {
                this.Tables.Add(new OurCustomersDataTable(ds.Tables["Customer"]));
            }
            if ((ds.Tables["Invoice"] != null)) {
                this.Tables.Add(new TheirInvoicesDataTable(ds.Tables["Invoice"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableOurCustomers = ((OurCustomersDataTable)(this.Tables["Customer"]));
            if ((this.tableOurCustomers != null)) {
                this.tableOurCustomers.InitVars();
            }
            this.tableTheirInvoices = ((TheirInvoicesDataTable)(this.Tables["Invoice"]));
            if ((this.tableTheirInvoices != null)) {
                this.tableTheirInvoices.InitVars();
            }
            this.relationCustomerInvoice = this.Relations["CustomerInvoice"];
        }
        
        private void InitClass() {
            this.DataSetName = "AnnotatedTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AnnotatedTDS";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableOurCustomers = new OurCustomersDataTable();
            this.Tables.Add(this.tableOurCustomers);
            this.tableTheirInvoices = new TheirInvoicesDataTable();
            this.Tables.Add(this.tableTheirInvoices);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("CustomerInvoice", new DataColumn[] {
                        this.tableOurCustomers.CustomerIDColumn}, new DataColumn[] {
                        this.tableTheirInvoices.CustomerIDColumn});
            this.tableTheirInvoices.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.Cascade;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationCustomerInvoice = new DataRelation("CustomerInvoice", new DataColumn[] {
                        this.tableOurCustomers.CustomerIDColumn}, new DataColumn[] {
                        this.tableTheirInvoices.CustomerIDColumn}, false);
            this.Relations.Add(this.relationCustomerInvoice);
        }
        
        private bool ShouldSerializeOurCustomers() {
            return false;
        }
        
        private bool ShouldSerializeTheirInvoices() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void OurCustomerChangeEventHandler(object sender, OurCustomerChangeEvent e);
        
        public delegate void TheirInvoiceChangeEventHandler(object sender, TheirInvoiceChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OurCustomersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCustomerID;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnMiddleName;
            
            private DataColumn columnAddress;
            
            private DataColumn columnApartment;
            
            private DataColumn columnCity;
            
            private DataColumn columnState;
            
            private DataColumn columnZip;
            
            private DataColumn columnHomePhone;
            
            private DataColumn columnBusinessPhone;
            
            private DataColumn columnFullName;
            
            internal OurCustomersDataTable() : 
                    base("Customer") {
                this.InitClass();
            }
            
            internal OurCustomersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn MiddleNameColumn {
                get {
                    return this.columnMiddleName;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn ApartmentColumn {
                get {
                    return this.columnApartment;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            internal DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            internal DataColumn HomePhoneColumn {
                get {
                    return this.columnHomePhone;
                }
            }
            
            internal DataColumn BusinessPhoneColumn {
                get {
                    return this.columnBusinessPhone;
                }
            }
            
            internal DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            public OurCustomer this[int index] {
                get {
                    return ((OurCustomer)(this.Rows[index]));
                }
            }
            
            public event OurCustomerChangeEventHandler OurCustomerChanged;
            
            public event OurCustomerChangeEventHandler OurCustomerChanging;
            
            public event OurCustomerChangeEventHandler OurCustomerDeleted;
            
            public event OurCustomerChangeEventHandler OurCustomerDeleting;
            
            public void AddOurCustomer(OurCustomer row) {
                this.Rows.Add(row);
            }
            
            public OurCustomer AddOurCustomer(System.Guid CustomerID, string FirstName, string LastName, string MiddleName, string Address, string Apartment, string City, string State, string Zip, string HomePhone, string BusinessPhone, string FullName) {
                OurCustomer rowOurCustomer = ((OurCustomer)(this.NewRow()));
                rowOurCustomer.ItemArray = new object[] {
                        CustomerID,
                        FirstName,
                        LastName,
                        MiddleName,
                        Address,
                        Apartment,
                        City,
                        State,
                        Zip,
                        HomePhone,
                        BusinessPhone,
                        FullName};
                this.Rows.Add(rowOurCustomer);
                return rowOurCustomer;
            }
            
            public OurCustomer FindByCustomerID(System.Guid CustomerID) {
                return ((OurCustomer)(this.Rows.Find(new object[] {
                            CustomerID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OurCustomersDataTable cln = ((OurCustomersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OurCustomersDataTable();
            }
            
            internal void InitVars() {
                this.columnCustomerID = this.Columns["CustomerID"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnMiddleName = this.Columns["MiddleName"];
                this.columnAddress = this.Columns["Address"];
                this.columnApartment = this.Columns["Apartment"];
                this.columnCity = this.Columns["City"];
                this.columnState = this.Columns["State"];
                this.columnZip = this.Columns["Zip"];
                this.columnHomePhone = this.Columns["HomePhone"];
                this.columnBusinessPhone = this.Columns["BusinessPhone"];
                this.columnFullName = this.Columns["FullName"];
            }
            
            private void InitClass() {
                this.columnCustomerID = new DataColumn("CustomerID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerID);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnMiddleName = new DataColumn("MiddleName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMiddleName);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnApartment = new DataColumn("Apartment", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApartment);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnState);
                this.columnZip = new DataColumn("Zip", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZip);
                this.columnHomePhone = new DataColumn("HomePhone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHomePhone);
                this.columnBusinessPhone = new DataColumn("BusinessPhone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBusinessPhone);
                this.columnFullName = new DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFullName);
                this.Constraints.Add(new UniqueConstraint("ADONETKey1", new DataColumn[] {
                                this.columnCustomerID}, true));
                this.Constraints.Add(new UniqueConstraint("UniqueHomePhone", new DataColumn[] {
                                this.columnHomePhone,
                                this.columnBusinessPhone}, false));
                this.columnCustomerID.AllowDBNull = false;
                this.columnCustomerID.Unique = true;
                this.columnFirstName.AllowDBNull = false;
                this.columnLastName.AllowDBNull = false;
                this.columnFullName.Expression = "LastName + \', \' + FirstName";
                this.columnFullName.ReadOnly = true;
            }
            
            public OurCustomer NewOurCustomer() {
                return ((OurCustomer)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OurCustomer(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OurCustomer);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OurCustomerChanged != null)) {
                    this.OurCustomerChanged(this, new OurCustomerChangeEvent(((OurCustomer)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OurCustomerChanging != null)) {
                    this.OurCustomerChanging(this, new OurCustomerChangeEvent(((OurCustomer)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OurCustomerDeleted != null)) {
                    this.OurCustomerDeleted(this, new OurCustomerChangeEvent(((OurCustomer)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OurCustomerDeleting != null)) {
                    this.OurCustomerDeleting(this, new OurCustomerChangeEvent(((OurCustomer)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOurCustomer(OurCustomer row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OurCustomer : DataRow {
            
            private OurCustomersDataTable tableOurCustomers;
            
            internal OurCustomer(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOurCustomers = ((OurCustomersDataTable)(this.Table));
            }
            
            public System.Guid CustomerID {
                get {
                    return ((System.Guid)(this[this.tableOurCustomers.CustomerIDColumn]));
                }
                set {
                    this[this.tableOurCustomers.CustomerIDColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    return ((string)(this[this.tableOurCustomers.FirstNameColumn]));
                }
                set {
                    this[this.tableOurCustomers.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    return ((string)(this[this.tableOurCustomers.LastNameColumn]));
                }
                set {
                    this[this.tableOurCustomers.LastNameColumn] = value;
                }
            }
            
            public string MiddleName {
                get {
                    if (this.IsMiddleNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOurCustomers.MiddleNameColumn]));
                    }
                }
                set {
                    this[this.tableOurCustomers.MiddleNameColumn] = value;
                }
            }
            
            public string Address {
                get {
                    if (this.IsAddressNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOurCustomers.AddressColumn]));
                    }
                }
                set {
                    this[this.tableOurCustomers.AddressColumn] = value;
                }
            }
            
            public string Apartment {
                get {
                    if (this.IsApartmentNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOurCustomers.ApartmentColumn]));
                    }
                }
                set {
                    this[this.tableOurCustomers.ApartmentColumn] = value;
                }
            }
            
            public string City {
                get {
                    if (this.IsCityNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOurCustomers.CityColumn]));
                    }
                }
                set {
                    this[this.tableOurCustomers.CityColumn] = value;
                }
            }
            
            public string State {
                get {
                    if (this.IsStateNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOurCustomers.StateColumn]));
                    }
                }
                set {
                    this[this.tableOurCustomers.StateColumn] = value;
                }
            }
            
            public string Zip {
                get {
                    if (this.IsZipNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOurCustomers.ZipColumn]));
                    }
                }
                set {
                    this[this.tableOurCustomers.ZipColumn] = value;
                }
            }
            
            public string HomePhone {
                get {
                    if (this.IsHomePhoneNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOurCustomers.HomePhoneColumn]));
                    }
                }
                set {
                    this[this.tableOurCustomers.HomePhoneColumn] = value;
                }
            }
            
            public string BusinessPhone {
                get {
                    if (this.IsBusinessPhoneNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOurCustomers.BusinessPhoneColumn]));
                    }
                }
                set {
                    this[this.tableOurCustomers.BusinessPhoneColumn] = value;
                }
            }
            
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableOurCustomers.FullNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOurCustomers.FullNameColumn] = value;
                }
            }
            
            public bool IsMiddleNameNull() {
                return this.IsNull(this.tableOurCustomers.MiddleNameColumn);
            }
            
            public void SetMiddleNameNull() {
                this[this.tableOurCustomers.MiddleNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableOurCustomers.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableOurCustomers.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsApartmentNull() {
                return this.IsNull(this.tableOurCustomers.ApartmentColumn);
            }
            
            public void SetApartmentNull() {
                this[this.tableOurCustomers.ApartmentColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableOurCustomers.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableOurCustomers.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateNull() {
                return this.IsNull(this.tableOurCustomers.StateColumn);
            }
            
            public void SetStateNull() {
                this[this.tableOurCustomers.StateColumn] = System.Convert.DBNull;
            }
            
            public bool IsZipNull() {
                return this.IsNull(this.tableOurCustomers.ZipColumn);
            }
            
            public void SetZipNull() {
                this[this.tableOurCustomers.ZipColumn] = System.Convert.DBNull;
            }
            
            public bool IsHomePhoneNull() {
                return this.IsNull(this.tableOurCustomers.HomePhoneColumn);
            }
            
            public void SetHomePhoneNull() {
                this[this.tableOurCustomers.HomePhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsBusinessPhoneNull() {
                return this.IsNull(this.tableOurCustomers.BusinessPhoneColumn);
            }
            
            public void SetBusinessPhoneNull() {
                this[this.tableOurCustomers.BusinessPhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsFullNameNull() {
                return this.IsNull(this.tableOurCustomers.FullNameColumn);
            }
            
            public void SetFullNameNull() {
                this[this.tableOurCustomers.FullNameColumn] = System.Convert.DBNull;
            }
            
            public TheirInvoice[] Invoices() {
                return ((TheirInvoice[])(this.GetChildRows(this.Table.ChildRelations["CustomerInvoice"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OurCustomerChangeEvent : EventArgs {
            
            private OurCustomer eventRow;
            
            private DataRowAction eventAction;
            
            public OurCustomerChangeEvent(OurCustomer row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OurCustomer Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TheirInvoicesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnInvoiceID;
            
            private DataColumn columnInvoiceNumber;
            
            private DataColumn columnInvoiceDate;
            
            private DataColumn columnTerms;
            
            private DataColumn columnFOB;
            
            private DataColumn columnPO;
            
            private DataColumn columnCustomerID;
            
            internal TheirInvoicesDataTable() : 
                    base("Invoice") {
                this.InitClass();
            }
            
            internal TheirInvoicesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn InvoiceIDColumn {
                get {
                    return this.columnInvoiceID;
                }
            }
            
            internal DataColumn InvoiceNumberColumn {
                get {
                    return this.columnInvoiceNumber;
                }
            }
            
            internal DataColumn InvoiceDateColumn {
                get {
                    return this.columnInvoiceDate;
                }
            }
            
            internal DataColumn TermsColumn {
                get {
                    return this.columnTerms;
                }
            }
            
            internal DataColumn FOBColumn {
                get {
                    return this.columnFOB;
                }
            }
            
            internal DataColumn POColumn {
                get {
                    return this.columnPO;
                }
            }
            
            internal DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            public TheirInvoice this[int index] {
                get {
                    return ((TheirInvoice)(this.Rows[index]));
                }
            }
            
            public event TheirInvoiceChangeEventHandler TheirInvoiceChanged;
            
            public event TheirInvoiceChangeEventHandler TheirInvoiceChanging;
            
            public event TheirInvoiceChangeEventHandler TheirInvoiceDeleted;
            
            public event TheirInvoiceChangeEventHandler TheirInvoiceDeleting;
            
            public void AddTheirInvoice(TheirInvoice row) {
                this.Rows.Add(row);
            }
            
            public TheirInvoice AddTheirInvoice(System.Guid InvoiceID, System.DateTime InvoiceDate, string Terms, string FOB, string PO, OurCustomer parentOurCustomerByCustomerInvoice) {
                TheirInvoice rowTheirInvoice = ((TheirInvoice)(this.NewRow()));
                rowTheirInvoice.ItemArray = new object[] {
                        InvoiceID,
                        null,
                        InvoiceDate,
                        Terms,
                        FOB,
                        PO,
                        parentOurCustomerByCustomerInvoice[0]};
                this.Rows.Add(rowTheirInvoice);
                return rowTheirInvoice;
            }
            
            public TheirInvoice FindByInvoiceID(System.Guid InvoiceID) {
                return ((TheirInvoice)(this.Rows.Find(new object[] {
                            InvoiceID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TheirInvoicesDataTable cln = ((TheirInvoicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TheirInvoicesDataTable();
            }
            
            internal void InitVars() {
                this.columnInvoiceID = this.Columns["InvoiceID"];
                this.columnInvoiceNumber = this.Columns["InvoiceNumber"];
                this.columnInvoiceDate = this.Columns["InvoiceDate"];
                this.columnTerms = this.Columns["Terms"];
                this.columnFOB = this.Columns["FOB"];
                this.columnPO = this.Columns["PO"];
                this.columnCustomerID = this.Columns["CustomerID"];
            }
            
            private void InitClass() {
                this.columnInvoiceID = new DataColumn("InvoiceID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInvoiceID);
                this.columnInvoiceNumber = new DataColumn("InvoiceNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInvoiceNumber);
                this.columnInvoiceDate = new DataColumn("InvoiceDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInvoiceDate);
                this.columnTerms = new DataColumn("Terms", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerms);
                this.columnFOB = new DataColumn("FOB", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFOB);
                this.columnPO = new DataColumn("PO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPO);
                this.columnCustomerID = new DataColumn("CustomerID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerID);
                this.Constraints.Add(new UniqueConstraint("ADONETKey2", new DataColumn[] {
                                this.columnInvoiceID}, true));
                this.columnInvoiceID.AllowDBNull = false;
                this.columnInvoiceID.Unique = true;
                this.columnInvoiceNumber.AutoIncrement = true;
                this.columnInvoiceNumber.AllowDBNull = false;
                this.columnInvoiceNumber.ReadOnly = true;
                this.columnInvoiceDate.AllowDBNull = false;
            }
            
            public TheirInvoice NewTheirInvoice() {
                return ((TheirInvoice)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TheirInvoice(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TheirInvoice);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TheirInvoiceChanged != null)) {
                    this.TheirInvoiceChanged(this, new TheirInvoiceChangeEvent(((TheirInvoice)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TheirInvoiceChanging != null)) {
                    this.TheirInvoiceChanging(this, new TheirInvoiceChangeEvent(((TheirInvoice)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TheirInvoiceDeleted != null)) {
                    this.TheirInvoiceDeleted(this, new TheirInvoiceChangeEvent(((TheirInvoice)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TheirInvoiceDeleting != null)) {
                    this.TheirInvoiceDeleting(this, new TheirInvoiceChangeEvent(((TheirInvoice)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTheirInvoice(TheirInvoice row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TheirInvoice : DataRow {
            
            private TheirInvoicesDataTable tableTheirInvoices;
            
            internal TheirInvoice(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTheirInvoices = ((TheirInvoicesDataTable)(this.Table));
            }
            
            public System.Guid InvoiceID {
                get {
                    return ((System.Guid)(this[this.tableTheirInvoices.InvoiceIDColumn]));
                }
                set {
                    this[this.tableTheirInvoices.InvoiceIDColumn] = value;
                }
            }
            
            public int InvoiceNumber {
                get {
                    return ((int)(this[this.tableTheirInvoices.InvoiceNumberColumn]));
                }
                set {
                    this[this.tableTheirInvoices.InvoiceNumberColumn] = value;
                }
            }
            
            public System.DateTime InvoiceDate {
                get {
                    return ((System.DateTime)(this[this.tableTheirInvoices.InvoiceDateColumn]));
                }
                set {
                    this[this.tableTheirInvoices.InvoiceDateColumn] = value;
                }
            }
            
            public string Terms {
                get {
                    if (this.IsTermsNull()) {
                        return "Net 30";
                    }
                    else {
                        return ((string)(this[this.tableTheirInvoices.TermsColumn]));
                    }
                }
                set {
                    this[this.tableTheirInvoices.TermsColumn] = value;
                }
            }
            
            public string FOB {
                get {
                    try {
                        return ((string)(this[this.tableTheirInvoices.FOBColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTheirInvoices.FOBColumn] = value;
                }
            }
            
            public string PO {
                get {
                    try {
                        return ((string)(this[this.tableTheirInvoices.POColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTheirInvoices.POColumn] = value;
                }
            }
            
            public System.Guid CustomerID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableTheirInvoices.CustomerIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTheirInvoices.CustomerIDColumn] = value;
                }
            }
            
            public OurCustomer Customer {
                get {
                    return ((OurCustomer)(this.GetParentRow(this.Table.ParentRelations["CustomerInvoice"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CustomerInvoice"]);
                }
            }
            
            public bool IsTermsNull() {
                return this.IsNull(this.tableTheirInvoices.TermsColumn);
            }
            
            public void SetTermsNull() {
                this[this.tableTheirInvoices.TermsColumn] = System.Convert.DBNull;
            }
            
            public bool IsFOBNull() {
                return this.IsNull(this.tableTheirInvoices.FOBColumn);
            }
            
            public void SetFOBNull() {
                this[this.tableTheirInvoices.FOBColumn] = System.Convert.DBNull;
            }
            
            public bool IsPONull() {
                return this.IsNull(this.tableTheirInvoices.POColumn);
            }
            
            public void SetPONull() {
                this[this.tableTheirInvoices.POColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomerIDNull() {
                return this.IsNull(this.tableTheirInvoices.CustomerIDColumn);
            }
            
            public void SetCustomerIDNull() {
                this[this.tableTheirInvoices.CustomerIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TheirInvoiceChangeEvent : EventArgs {
            
            private TheirInvoice eventRow;
            
            private DataRowAction eventAction;
            
            public TheirInvoiceChangeEvent(TheirInvoice row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TheirInvoice Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
